@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div>
    <div class="text-center">
        <h1>Welcome</h1>
    </div>
    <p>Here is my solution to the posed problem (you can see the brief below).</p>
    <p>I hope you like it!</p>
</div>
<hr/>
<div>
    <h2>Developer Statements</h2>
    <p>
        It should be noted as well, that this project is a little slapdash in some areas. The Questionnaire
        functionality works only every run. There is no persistance when the system goes down, mostly for time
        purposes.
    </p>
    <h3>TDD</h3>
    <p>
        Normally I would write tests then code, as per Test Driven Development. Especially around the Factories, 
        however, as they are simple place holders, I have decided to put time into other areas. 
    </p>
    <h3>Untidyness</h3>
    <p>
        Towards the Answering segment, things have gotten messy as it's gotten a bit late.  I have gotten down to 
        what I kind of intended, but it could do with some fixing up, styling wise and the back end code.
    </p>
    <p>
        In fact, I'll admit it.  It was a little rushed.  The whole thing has taken me a few more hours than 2 to do,
        but I felt them necessary to display what I wanted.
    </p>
    <h3>Next Steps</h3>
    <p>
        There is no way to review <code>AnsweredQuestionnaires</code>, so that would be something to work on.  Same
        with plugging in the editing of the Questionnaires.  Obviously, there is Repository.  Filling in missing tests
        as I moved to try to get something done.
    </p>
    <h3>Bug</h3>
    <p>
        There is a bug in the Questionnaire that when adding questions to a new Questionnaire that the old questions
        are forgotten, irritably.
    </p>
</div>
<hr/>
<div class="row">
    <h1>Brief</h1>
    <div class="col-12">
        <p>
            Using C# in .Net 7.0, design a navigation mechanism for questionnaires. The questions themselves are not
            important and responses do not need to be validated. The idea is that a response to a question can be
            submitted in combination with either moving on to the next question or moving back to the previous
            question. If the user moves back to the previous question the response they had submitted
            would be provided with that question - as if a user were navigating back to check their answers.
            A questionnaire can have any number of questions but no duplicates.
        </p>
        <p>
            Navigation rules are as follows:
        </p>
        <div>
            <ul>
                <li>The user should not be able to navigate back beyond the first question.</li>
                <li>The user should not be able to navigate forward beyond the last question.</li>
                <li>
                    The user should be able to change a previous response and re-submit, either
                    moving forward or back.
                </li>
                <li>An empty response is not permitted if also attempting to move to a new question.</li>
                <li>Moving back to a previous question without responding to a new question is permitted.</li>
            </ul>
        </div>
        <p>
            The task should take between 1-2hr with as many of the requirements implemented as possible. A working
            application is not expected as the purpose is to capture the logic of the application in appropriate
            classes using OOP and/or Functional principles. Commented pseudocode may be used to further express your
            ideas.
        </p>
    </div>
</div>